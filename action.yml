name: 'Go Builder'
description: 'Builds golang projects with lots of options'
inputs:
  target:
    description: 'Path to build'
    required: false
    default: './...'
  version:
    description: 'Version number'
    required: false
    default: '0.0.0'
  location:
    description: 'Version variable location path'
    required: false
    default: ''
  date:
    description: 'Date created'
    required: false
    default: ''
  ld-library-path:
    description: 'shared library search path'
    required: false
    default: ''
  cgo-ldflags:
    description: 'Additional LDFLAGS passed to the C/C++ compiler by cgo'
    required: false
    default: ''
  cgo-cppflags:
    description: 'Additional CPPFLAGS passed to the C++ compiler by cgo'
    required: false
    default: ''
  extldflags:
    description: 'Parameter passed to the -extldflags options of ldflags'
    required: false
    default: '-static'
  cross-os:
    description: 'GOOS env variable for cross compilation - see `go tool dist list`'
    required: false
    default: ''
  cross-arch:
    description: 'GOARCH env variable for cross compilation - see `go tool dist list`'
    required: false
    default: ''
  cgoenabled:
    description: 'Enable cgo (true or false)'
    required: false
    default: 'true'
  tags:
    description: 'Build tags to pass to the go build command (space-separated)'
    required: false
    default: ''

runs:
  using: "composite"
  steps: 
    - id: go-build
      run: |
        if [[ -n "${{ inputs.ld-library-path }}" ]]; then
          export LD_LIBRARY_PATH="${{ inputs.ld-library-path }}"
        fi

        export CGO_ENABLED="${{ inputs.cgoenabled }}"

        if [[ "$CGO_ENABLED" == "true" ]]; then
          if [[ -n "${{ inputs.cgo-ldflags }}" ]]; then
            export CGO_LDFLAGS="${{ inputs.cgo-ldflags }}"
          fi
          if [[ -n "${{ inputs.cgo-cppflags }}" ]]; then
            export CGO_CPPFLAGS="${{ inputs.cgo-cppflags }}"
          fi
        else
          if [[ -n "${{ inputs.cgo-ldflags }}" || -n "${{ inputs.cgo-cppflags }}" ]]; then
            echo "Warning: CGO_ENABLED is false, but CGO_LDFLAGS or CGO_CPPFLAGS were provided. These will be ignored."
          fi
        fi

        ldflags="-s -w -extldflags '${{ inputs.extldflags }}'"
        if [[ -n "${{ inputs.location }}" ]]; then
          ldflags="-X ${{ inputs.location }}.commit=${{ github.sha }} $ldflags"
          ldflags="-X ${{ inputs.location }}.version=${{ inputs.version }} $ldflags"
          ldflags="-X ${{ inputs.location }}.date=${{ inputs.date }} $ldflags"
        fi

        if [[ -n "${{ inputs.cross-os }}" ]]; then
          export GOOS="${{ inputs.cross-os }}"
        fi
        if [[ -n "${{ inputs.cross-arch }}" ]]; then
          export GOARCH="${{ inputs.cross-arch }}"
        fi

        tags_arg=()
        if [[ -n "${{ inputs.tags }}" ]]; then
          tags_arg=(-tags "${{ inputs.tags }}")
        fi

        echo "-----------------------------------------"
        echo "Executing:"
        echo "-----------------------------------------"
        echo go build -a -trimpath "${tags_arg[@]}" -ldflags \"$ldflags\" ${{ inputs.target }}
        echo "-----------------------------------------"

        go build -a -trimpath "${tags_arg[@]}" -ldflags "$ldflags" ${{ inputs.target }}
      shell: bash
